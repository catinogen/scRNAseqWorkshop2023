--------------
  R Projects
--------------
Rstudio projects are a convenient way to organize analyses. 
They are native to Rstudio and have several extensions that improve your reproducibility and efficiency when you're ready to take your analyses to the next step.
For this workshop, we will rely on the simplest project workflow to organize our files.
You can read more about projects and project workflows here:

https://rstats.wtf/projects.html
https://support.posit.co/hc/en-us/articles/200526207-Using-Projects

We also use one extension that relies on (or at least is greatly facilitated by) projects called the 'here' package. 
This simplifies relative paths to files, allowing paths to be agnostic of the machine. 
For example, if you have data/scripts stored on a shared file resource (cloud, volumes, mounts, etc.),
this package will help paths be valid for anyone else that might access the project. Read more here:

https://here.r-lib.org/


----------------------------
     Advanced reading
----------------------------

While we won't require the rest of these for the workshop, if you are comfortable with R/Rstudio and managing R projects, you may consider introducing
more advanced methods in your analysis. We can try to facilitate the troubleshooting of these tools during the workshop. However, the main goal
is to teach single-cell analysis, so if incorporating these tools is an obstacle to working with the analysis scripts, we'll suggest you set these
aside for future projects. 

--------------
     Git
--------------
Git is a version tracking tool that allows you to save changes to files/projects over time, or run multiple 'versions' of an analysis in the same folder without saving static copies of files. 
Ever saved a manuscript with filenames like 'manuscript_v2' 'manuscript_v3' 'manuscript_final' 'manuscript_final_final'? 
You might benefit from version tracking through Git. 

In the single-cell analysis world, you may find yourself employing different tools or techniques to advance an analysis. 
Some of these may prove dead-ends, but keeping a record of your efforts is still useful.
Branching and version tracking can help you record all efforts while maintaining a tidy final version of a script for publication. 

Rstudio also has some useful plugins to use Git with a GUI. 
There's a lot to read here, but if you're comfortable with R and Rstudio, you might consider trying to use Git for this workshop as a low-stakes practice. 

https://happygitwithr.com/

--------------
     Renv
--------------

Renv is an R package that captures versions of packages used in a project. 
It can help you use different versions of packages for different projects. 
This is useful for making reproducible workflows, allowing you to jump back to old projects and share projects with other users. 
It can be a bit painful to set up at first (though they did recently release their first official non-beta version, so it's getting better),
but it's worth the investment if you anticipate publishing results or working on more than one project. 

https://rstudio.github.io/renv/articles/renv.html

--------------
    Docker
--------------

'Containers are a standardized unit of software that allows developers to isolate their app from its environment, solving the “it works on my machine” headache.'
You can think of containers as virtual machines with isolated operating systems and other computational architecture. 
Many users have reported subtly different R outputs from different machines (e.g. Mac vs Windows vs Linux, different processors).
While the differences are often very small, it takes away from reproducibility of results, especially when we compound errors across transformations and reductions. 
This can be mitigated by performing your analysis on a container with a fixed architecture that others can reproduce via a docker image.
This is a more advanced consideration, and is likely beyond the scope of this workshop, but it's worth considering for publication-ready results.
The Rocker project maintains public (free) docker images with Rstudio servers ready to use 'out of the box'.

https://journal.r-project.org/archive/2017/RJ-2017-065/RJ-2017-065.pdf
https://rocker-project.org/

